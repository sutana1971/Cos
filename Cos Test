local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

local Window = WindUI:CreateWindow({
    Title = "X",
    Icon = "",
    Author = "",
    Size = UDim2.fromOffset(400, 300),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    Background = "", 
    BackgroundImageTransparency = 0.95,
    HideSearchBar = true,
    ScrollBarEnabled = false,
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function() end,
    }
})

local Tabs = {
    MainTab = Window:Tab({ Title = "Main "}),
}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")
local TeleportService = game:GetService("TeleportService")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

local currentFocus, slotClicked, stopAll, returnLoopActive = nil, false, false, true
local AutoStartRejoin = false
local rejoining = false

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AutoRejoinGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = PlayerGui

local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(0.3, 0, 0.1, 0)
textLabel.Position = UDim2.new(0.35, 0, 0.85, 0)
textLabel.BackgroundTransparency = 1
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.TextScaled = true
textLabel.Visible = false
textLabel.Parent = screenGui

local guiToHide = {
    "DailyLoginGui.ContainerFrame.LoyaltyFrame",
    "DailyLoginGui.ContainerFrame.ShopFrame",
    "SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFrame.2",
    "SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFrame.3",
    "SaveSelectionGui.ContainerFrame.BottomFrame",
    "SaveSelectionGui.ContainerFrame.CurrencyFrame",
    "SaveSelectionGui.ContainerFrame.LeftCornerFrame",
    "SaveSelectionGui.ContainerFrame.RightCornerFrame",
    "SaveSelectionGui.ContainerFrame.StorageFrame",
    "SaveSelectionGui.ContainerFrame.AllSlotsFrame.PagesFrame",
    "SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFrame.1.InnerFrame.CreatureFrame.StatsFrame",
    "SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFrame.1.InnerFrame.CreatureFrame.SwapButton",
    "SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFrame.1.InnerFrame.CreatureFrame.ButtonsFrame.DeleteButton",
    "SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFrame.1.InnerFrame.CreatureFrame.ButtonsFrame.ViewButton",
    "PromptGui.PromptFrame.PromptFrames.RestartCreatureNoMutations.CloseButton",
    "PromptGui.PromptFrame.PromptFrames.RestartCreatureNoMutations.CancelButton",
    "PromptGui.PromptFrame.PromptFrames.RestartCreatureNoMutations.OwnedFrame",
    "SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFrame.1.InnerFrame.CreatureFrame.ButtonsFrame.EditButton",
    "SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFrame.1.InnerFrame.CreatureFrame.PlushieFrame",
    "DeathGui.ContainerFrame.RewardsFrame",
    "DeathGui.ContainerFrame.BottomFrame.ButtonsFrame.Upsell",
}

local function getGui(path)
    local obj = PlayerGui
    for _, part in ipairs(string.split(path, ".")) do
        obj = obj:FindFirstChild(part)
        if not obj then return nil end
    end
    return obj
end

local function pressKey(key)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
    task.wait(1)
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

Tabs.MainTab:Toggle({
    Title = "Auto Start/Rejoin",
    Value = true,
    Default = false,
    Callback = function(Value)
        AutoStartRejoin = Value
        if not Value then
            textLabel.Visible = false
            rejoining = false
        end
    end
})

RunService.RenderStepped:Connect(function()
    if not AutoStartRejoin then return end
    if stopAll then return end

    for _, path in ipairs(guiToHide) do
        local frame = getGui(path)
        if frame and frame:IsA("GuiObject") then
            frame.Visible = false
        end
    end

    local claimButton = PlayerGui.DailyLoginGui.ContainerFrame.CurrencyFrame.ClaimButton
    local closeButton = PlayerGui.DailyLoginGui.ContainerFrame.CurrencyFrame.CloseButton
    local buttonsFrame = PlayerGui.SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFrame["1"].InnerFrame.CreatureFrame.ButtonsFrame
    local restartButton = buttonsFrame:FindFirstChild("RestartButton")
    local playButton = buttonsFrame:FindFirstChild("PlayButton")
    local runButton = PlayerGui.PromptGui.PromptFrame.PromptFrames.RestartCreatureNoMutations:FindFirstChild("RunButton")
    local slotFrame1 = PlayerGui.SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFrame["1"]
    local deathReturnButton = PlayerGui.DeathGui.ContainerFrame.BottomFrame.ButtonsFrame:FindFirstChild("Return")

    local focused = false

    if claimButton and not claimButton.Visible then
        GuiService.SelectedObject = claimButton
        currentFocus = claimButton
        pressKey(Enum.KeyCode.W)
        pressKey(Enum.KeyCode.Return)
        focused = true
        task.wait(1)
    end

    if closeButton and closeButton.Visible then
        GuiService.SelectedObject = closeButton
        currentFocus = closeButton
        pressKey(Enum.KeyCode.W)
        pressKey(Enum.KeyCode.Return)
        focused = true
        task.wait(1)
    end

    if deathReturnButton and deathReturnButton.Visible and returnLoopActive then
        GuiService.SelectedObject = deathReturnButton
        currentFocus = deathReturnButton
        pressKey(Enum.KeyCode.W)
        pressKey(Enum.KeyCode.Return)
        focused = true
        task.wait(0.1)
        if not deathReturnButton.Visible then
            returnLoopActive = false
            GuiService.SelectedObject = nil
        end
    end

    if (restartButton or playButton) and not slotClicked then
        if slotFrame1 and slotFrame1:IsA("GuiButton") and slotFrame1.Visible then
            GuiService.SelectedObject = slotFrame1
            currentFocus = slotFrame1
            pressKey(Enum.KeyCode.W)
            pressKey(Enum.KeyCode.Return)
            slotClicked = true
            task.wait(0.5)
        end
    end

    if restartButton and restartButton:IsA("GuiButton") and restartButton.Visible then
        GuiService.SelectedObject = restartButton
        currentFocus = restartButton
        pressKey(Enum.KeyCode.W)
        pressKey(Enum.KeyCode.Return)
        focused = true
        task.wait(0.5)
        if runButton and runButton:IsA("GuiButton") and runButton.Visible then
            GuiService.SelectedObject = runButton
            currentFocus = runButton
            pressKey(Enum.KeyCode.W)
            pressKey(Enum.KeyCode.Return)
            task.wait(0.5)
        end
    end

    if playButton and playButton:IsA("GuiButton") and playButton.Visible then
        GuiService.SelectedObject = playButton
        currentFocus = playButton
        pressKey(Enum.KeyCode.W)
        pressKey(Enum.KeyCode.Return)
        focused = true
        stopAll = true
        return
    end

    if not focused and currentFocus then
        GuiService.SelectedObject = nil
        currentFocus = nil
    end
end)

RunService.Heartbeat:Connect(function()
    if not AutoStartRejoin then return end

    local targetPlayer = Players:FindFirstChild(Player.Name)
    if targetPlayer then
        local deathGui = targetPlayer:FindFirstChild("PlayerGui"):FindFirstChild("DeathGui")
        if deathGui then
            local containerFrame = deathGui:FindFirstChild("ContainerFrame")
            if containerFrame and containerFrame.Visible and not rejoining then
                rejoining = true
                textLabel.Visible = false
                task.wait(10)
                if AutoStartRejoin then
                    TeleportService:Teleport(game.PlaceId, Player)
                end
            elseif containerFrame and not containerFrame.Visible then
                rejoining = false
            end
        end
    end
end)



local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local OtherFrame = LocalPlayer.PlayerGui.HUDGui.MissionsFrame.Other
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local lakesFolder = workspace:WaitForChild("Interactions"):WaitForChild("Lakes")
local foodFolder = workspace:WaitForChild("Interactions"):WaitForChild("Food")
local npcFolder = workspace:WaitForChild("Interactions"):WaitForChild("NPCs"):WaitForChild("Models")
local mudFolder = workspace:WaitForChild("Interactions"):WaitForChild("Mud")

local AutoFarm = false

local function tweenFlyTo(targetPos, speed)
    if not hrp or not targetPos then return end
    speed = speed or 300
    local dist = (hrp.Position - targetPos).Magnitude
    local time = math.max(0.1, dist / speed)
    local tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(hrp, tweenInfo, {CFrame = CFrame.new(targetPos)})
    tween:Play()
    tween.Completed:Wait()
end

local function pressKey(keyCode, times, interval)
    times = times or 1
    interval = interval or 0.1
    for i = 1, times do
        VirtualInputManager:SendKeyEvent(true, keyCode, false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, keyCode, false, game)
        if i < times then task.wait(interval) end
    end
end

local function clickMouse(times, interval)
    times = times or 1
    interval = interval or 0.1
    for i = 1, times do
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        task.wait(0.05)
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
        if i < times then task.wait(interval) end
    end
end

local function getClosestPart(parts, nameFilter)
    local closest, closestDist
    for _, obj in pairs(parts:GetChildren()) do
        if not nameFilter or obj.Name == nameFilter then
            local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
            if part then
                local dist = (hrp.Position - part.Position).Magnitude
                if not closestDist or dist < closestDist then
                    closest = part
                    closestDist = dist
                end
            end
        end
    end
    return closest
end

local function getClosestMud()
    local closest = nil
    local closestDist = math.huge

    for _, mudPart in pairs(mudFolder:GetChildren()) do
        if mudPart:IsA("BasePart") and mudPart.Name == "Mud" then
            local dist = (hrp.Position - mudPart.Position).Magnitude
            if dist < closestDist then
                closest = mudPart
                closestDist = dist
            end
        end
    end

    return closest
end

local function doSniff()
    local sniffUI = OtherFrame:FindFirstChild("Sniff")
    if sniffUI and sniffUI.Visible then
        pressKey(Enum.KeyCode.H, 1, 1)
    end
end

local function doEatFoodDrinkWater()
    local eatUI = OtherFrame:FindFirstChild("EatFoodDrinkWater")
    if eatUI and eatUI.Visible then
        local targetFood = getClosestPart(foodFolder, "Ribs")
        if targetFood then
            tweenFlyTo(targetFood.Position + Vector3.new(0,3,8))
            local startTime = tick()
            while tick() - startTime < 7 and targetFood.Parent do
                pressKey(Enum.KeyCode.E, 1, 0.1)
            end
        end
        for _, lake in pairs(lakesFolder:GetChildren()) do
            local mask = lake:FindFirstChild("SurfaceMask")
            if mask and mask:IsA("BasePart") then
                mask.CanCollide = true
            end
        end
        local nearestSurface = nil
        local nearestDist = math.huge
        for _, lake in pairs(lakesFolder:GetChildren()) do
            local mask = lake:FindFirstChild("SurfaceMask")
            if mask and mask:IsA("BasePart") then
                local dist = (hrp.Position - mask.Position).Magnitude
                if dist < nearestDist then
                    nearestDist = dist
                    nearestSurface = mask
                end
            end
        end

        if nearestSurface then
            tweenFlyTo(nearestSurface.Position + Vector3.new(0,3,8))
            local startTime = tick()
            while tick() - startTime < 7 and nearestSurface.Parent do
                pressKey(Enum.KeyCode.E, 1, 0.1)
            end
        end
    end
end

local function doAttackOrHeal()
    local attackUI = OtherFrame:FindFirstChild("AttackOrHealCreatureOrNPC")
    if attackUI and attackUI.Visible then
        local targetNPC = getClosestPart(npcFolder)
        if targetNPC then
            local behindPos = targetNPC.Position - targetNPC.CFrame.LookVector * 3 + Vector3.new(0,3,0)
            tweenFlyTo(behindPos)
            local startTime = tick()
            while tick() - startTime < 10 and targetNPC.Parent do
                clickMouse(1, 0.05)
                if targetNPC.Parent then
                    hrp.CFrame = CFrame.new(targetNPC.Position - targetNPC.CFrame.LookVector * 4 + Vector3.new(0,3,0))
                end
                task.wait()
            end
        end
    end
end


local function doConcealScent()
    local concealUI = OtherFrame:FindFirstChild("ConcealScent")
    if concealUI and concealUI.Visible then
        local targetMud = getClosestMud()
        if targetMud then
            tweenFlyTo(targetMud.Position + Vector3.new(0,5,0))
            local startTime = tick()
            while tick() - startTime < 15 and targetMud.Parent do
                pressKey(Enum.KeyCode.E, 1, 0.1)
            end
        end
    end
end

local warpPositions = {
    Vector3.new(367.259, 529.677, 2065.212),
    Vector3.new(-1261.408, 382.812, 2933.799),
    Vector3.new(-1767.022, 473.798, 991.333),
    Vector3.new(-2767.479, 949.678, -1455.184),
    Vector3.new(38.187, 381.344, -2330.751),
    Vector3.new(1732.646, 352.271, -1108.944),
    Vector3.new(2176.798, 263.999, 1071.721),
    Vector3.new(131.073, 332.457, 40.506),
    Vector3.new(-1391.472, 411.293, -2227.817)
}

local function doRefreshTeleport()
    local hasMission = false
    for _, missionName in ipairs({"Sniff","EatFoodDrinkWater","AttackOrHealCreatureOrNPC","ConcealScent"}) do
        local missionUI = OtherFrame:FindFirstChild(missionName)
        if missionUI and missionUI.Visible then
            hasMission = true
            break
        end
    end

    if hasMission then return end

    for _, pos in ipairs(warpPositions) do
        hrp.CFrame = CFrame.new(pos)
        local waitTime = 0
        while waitTime < 4 do
            waitTime = waitTime + task.wait(0.5)
            hasMission = false
            for _, missionName in ipairs({"Sniff","EatFoodDrinkWater","AttackOrHealCreatureOrNPC","ConcealScent"}) do
                local missionUI = OtherFrame:FindFirstChild(missionName)
                if missionUI and missionUI.Visible then
                    hasMission = true
                    break
                end
            end
            if hasMission then return end
        end
    end
end

local actions = {doSniff, doEatFoodDrinkWater, doAttackOrHeal, doConcealScent}

task.spawn(function()
    while task.wait(1) do
        if AutoFarm then

            pcall(doRefreshTeleport)

            local shuffled = {}
            for i,v in ipairs(actions) do table.insert(shuffled,v) end
            for i = #shuffled, 2, -1 do
                local j = math.random(i)
                shuffled[i], shuffled[j] = shuffled[j], shuffled[i]
            end

            for _, action in ipairs(shuffled) do
                if not AutoFarm then break end
                pcall(action)
                task.wait(0.1)
            end
        end
    end
end)

Tabs.MainTab:Toggle({
    Title = "Auto Farm #1",
    Default = false,
    Callback = function(Value)
        AutoFarm = Value
    end
})


local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local OtherFrame = LocalPlayer.PlayerGui.HUDGui.MissionsFrame.Other
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local lakesFolder = workspace:WaitForChild("Interactions"):WaitForChild("Lakes")
local foodFolder = workspace:WaitForChild("Interactions"):WaitForChild("Food")
local npcFolder = workspace:WaitForChild("Interactions"):WaitForChild("NPCs"):WaitForChild("Models")
local mudFolder = workspace:WaitForChild("Interactions"):WaitForChild("Mud")

local AutoFarm = false

local function tweenFlyTo(targetPos, speed)
    if not hrp or not targetPos then return end
    speed = speed or 300
    local dist = (hrp.Position - targetPos).Magnitude
    local time = math.max(0.1, dist / speed)
    local tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(hrp, tweenInfo, {CFrame = CFrame.new(targetPos)})
    tween:Play()
    tween.Completed:Wait()
end

local function pressKey(keyCode, times, interval)
    times = times or 1
    interval = interval or 0.1
    for i = 1, times do
        VirtualInputManager:SendKeyEvent(true, keyCode, false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, keyCode, false, game)
        if i < times then task.wait(interval) end
    end
end

local function clickMouse(times, interval)
    times = times or 1
    interval = interval or 0.1
    for i = 1, times do
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        task.wait(0.05)
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
        if i < times then task.wait(interval) end
    end
end

local function getClosestPart(parts, nameFilter)
    local closest, closestDist
    for _, obj in pairs(parts:GetChildren()) do
        if not nameFilter or obj.Name == nameFilter then
            local part = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
            if part then
                local dist = (hrp.Position - part.Position).Magnitude
                if not closestDist or dist < closestDist then
                    closest = part
                    closestDist = dist
                end
            end
        end
    end
    return closest
end

local function getClosestMud()
    local closest = nil
    local closestDist = math.huge

    for _, mudPart in pairs(mudFolder:GetChildren()) do
        if mudPart:IsA("BasePart") and mudPart.Name == "Mud" then
            local dist = (hrp.Position - mudPart.Position).Magnitude
            if dist < closestDist then
                closest = mudPart
                closestDist = dist
            end
        end
    end

    return closest
end

local function doSniff()
    local sniffUI = OtherFrame:FindFirstChild("Sniff")
    if sniffUI and sniffUI.Visible then
        pressKey(Enum.KeyCode.H, 1, 1)
    end
end

local function doEatFoodDrinkWater()
    local eatUI = OtherFrame:FindFirstChild("EatFoodDrinkWater")
    if eatUI and eatUI.Visible then
        local targetFood = getClosestPart(foodFolder, "Herbivore Carcass")
        if targetFood then
            tweenFlyTo(targetFood.Position + Vector3.new(0,3,8))
            local startTime = tick()
            while tick() - startTime < 7 and targetFood.Parent do
                pressKey(Enum.KeyCode.E, 1, 0.1)
            end
        end

        for _, lake in pairs(lakesFolder:GetChildren()) do
            local mask = lake:FindFirstChild("SurfaceMask")
            if mask and mask:IsA("BasePart") then
                mask.CanCollide = true
            end
        end

        local nearestSurface = nil
        local nearestDist = math.huge
        for _, lake in pairs(lakesFolder:GetChildren()) do
            local mask = lake:FindFirstChild("SurfaceMask")
            if mask and mask:IsA("BasePart") then
                local dist = (hrp.Position - mask.Position).Magnitude
                if dist < nearestDist then
                    nearestDist = dist
                    nearestSurface = mask
                end
            end
        end

        if nearestSurface then
            tweenFlyTo(nearestSurface.Position + Vector3.new(0,3,8))
            local startTime = tick()
            while tick() - startTime < 7 and nearestSurface.Parent do
                pressKey(Enum.KeyCode.E, 1, 0.1)
            end
        end
    end
end

local function doAttackOrHeal()
    local attackUI = OtherFrame:FindFirstChild("AttackOrHealCreatureOrNPC")
    if attackUI and attackUI.Visible then
        local targetNPC = getClosestPart(npcFolder)
        if targetNPC then
            local behindPos = targetNPC.Position - targetNPC.CFrame.LookVector * 3 + Vector3.new(0,3,0)
            tweenFlyTo(behindPos)
            local startTime = tick()
            while tick() - startTime < 10 and targetNPC.Parent do
                clickMouse(1, 0.05)
                if targetNPC.Parent then
                    hrp.CFrame = CFrame.new(targetNPC.Position - targetNPC.CFrame.LookVector * 4 + Vector3.new(0,3,0))
                end
                task.wait()
            end
        end
    end
end

local function doConcealScent()
    local concealUI = OtherFrame:FindFirstChild("ConcealScent")
    if concealUI and concealUI.Visible then
        local targetMud = getClosestMud()
        if targetMud then
            tweenFlyTo(targetMud.Position + Vector3.new(0,5,0))
            local startTime = tick()
            while tick() - startTime < 15 and targetMud.Parent do
                pressKey(Enum.KeyCode.E, 1, 0.1)
            end
        end
    end
end

local warpPositions = {
    Vector3.new(367.259, 529.677, 2065.212),
    Vector3.new(-1261.408, 382.812, 2933.799),
    Vector3.new(-1767.022, 473.798, 991.333),
    Vector3.new(-2767.479, 949.678, -1455.184),
    Vector3.new(38.187, 381.344, -2330.751),
    Vector3.new(1732.646, 352.271, -1108.944),
    Vector3.new(2176.798, 263.999, 1071.721),
    Vector3.new(131.073, 332.457, 40.506),
    Vector3.new(-1391.472, 411.293, -2227.817)
}

local function doRefreshTeleport()
    local hasMission = false
    for _, missionName in ipairs({"Sniff","EatFoodDrinkWater","AttackOrHealCreatureOrNPC","ConcealScent"}) do
        local missionUI = OtherFrame:FindFirstChild(missionName)
        if missionUI and missionUI.Visible then
            hasMission = true
            break
        end
    end
    if hasMission then return end

    for _, pos in ipairs(warpPositions) do
        hrp.CFrame = CFrame.new(pos)

        local waitTime = 0
        while waitTime < 4 do
            waitTime = waitTime + task.wait(0.5)

            hasMission = false
            for _, missionName in ipairs({"Sniff","EatFoodDrinkWater","AttackOrHealCreatureOrNPC","ConcealScent"}) do
                local missionUI = OtherFrame:FindFirstChild(missionName)
                if missionUI and missionUI.Visible then
                    hasMission = true
                    break
                end
            end

            if hasMission then return end
        end
    end
end

local actions = {doSniff, doEatFoodDrinkWater, doAttackOrHeal, doConcealScent}

task.spawn(function()
    while task.wait(1) do
        if AutoFarm then
            pcall(doRefreshTeleport)
            local shuffled = {}
            for i,v in ipairs(actions) do table.insert(shuffled,v) end
            for i = #shuffled, 2, -1 do
                local j = math.random(i)
                shuffled[i], shuffled[j] = shuffled[j], shuffled[i]
            end

            for _, action in ipairs(shuffled) do
                if not AutoFarm then break end
                pcall(action)
                task.wait(0.1)
            end
        end
    end
end)

Tabs.MainTab:Toggle({
    Title = "Auto Farm #2",
    Default = false,
    Value = true,
    Callback = function(Value)
        AutoFarm = Value
    end
})


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local warpPositions = {
    Vector3.new(367.259, 529.677, 2065.212),
    Vector3.new(-1261.408, 382.812, 2933.799),
    Vector3.new(-1767.022, 473.798, 991.333),
    Vector3.new(-2767.479, 949.678, -1455.184),
    Vector3.new(38.187, 381.344, -2330.751),
    Vector3.new(1732.646, 352.271, -1108.944),
    Vector3.new(2176.798, 263.999, 1071.721),
    Vector3.new(131.073, 332.457, 40.506),
    Vector3.new(-1391.472, 411.293, -2227.817)
}

local currentIndex = 0

Tabs.MainTab:Button({
    Title = "Next Quest",
    Callback = function()
        currentIndex = currentIndex + 1
        if currentIndex > #warpPositions then
            currentIndex = 1
        end

        local targetPos = warpPositions[currentIndex]
        hrp.CFrame = CFrame.new(targetPos)
    end
})
